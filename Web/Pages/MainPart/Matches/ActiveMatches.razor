@using Test.Pages.PopUpWindows
@inject IDialogService _dialogService

<div class="active-matches">
    <div class="list-of-active-matches card">
        <div class="active-matches-title" style="display: inline-block">
            <SearchAndLiftMatches Events="Events" LeafEventsCallback="@LeafDisplayEvents" Step="@step"></SearchAndLiftMatches>
        </div>

        <ul>
            @foreach (var selectEvent in displayEvents)
            {
                <li>
                    <div class="active-matches-bet">
                        <div class="team-left">
                            <div class="team" @onclick="() => ClickEvent(selectEvent)">
                                <div class="logo-team">
                                    <img src="@selectEvent.IdTeam1Navigation.Logo">
                                    <div class="text-place-bet">
                                        СДЕЛАТЬ<br />СТАВКУ
                                    </div>
                                </div>
                                <p class="title">@selectEvent.IdTeam1Navigation.Title</p>
                                <div class="koef">
                                    <p>@(GetCoef1(selectEvent.PossibleBets))</p>
                                    <hr />
                                </div>
                            </div>
                        </div>
                        <div class="main-info">
                            <div class="vs">
                                <p>VS</p>
                            </div>
                            <div class="matches-bet-info">
                                <p class="tournament-title">ESEA Advanced NA</p>
                                <p class="type-bo">BO3</p>
                                <p class="time">@((@DateTime.Now - selectEvent.StartDate).ToString(@"hh\:mm\:ss"))</p>
                            </div>
                        </div>
                        <div class="team-right">
                            <div class="team" @onclick="() => ClickEvent(selectEvent)">
                                <div class="logo-team">
                                    <img src="@selectEvent.IdTeam2Navigation.Logo">
                                    <div class="text-place-bet">
                                        СДЕЛАТЬ<br />СТАВКУ
                                    </div>
                                </div>
                                <p class="title">@selectEvent.IdTeam2Navigation.Title</p>
                                <div class="koef">
                                    <p>@(GetCoef2(selectEvent.PossibleBets))</p>
                                    <hr />
                                </div>
                            </div>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>







@code {

    [Parameter]
    public EventCallback RefreshUser { get; set; }

    [CascadingParameter]
    public Sport SelectSport { get; set; }

    [Parameter]
    public List<Event> Events { get; set; }

    private List<Event> displayEvents { get; set; }

    private int step = 10;

    
    private String GetCoef1(ICollection<PossibleBet> ts)
    {
        var tob = ts.FirstOrDefault(x => x.IdTob == 1);
        return tob is null ? "null" : tob.Coef1.ToString();
    }
    private String GetCoef2(ICollection<PossibleBet> ts)
    {
        var tob = ts.FirstOrDefault(x => x.IdTob == 1);
        return tob is null ? "null" : tob.Coef2.ToString();
    }

    private async void ClickEvent(Event selectEvent)
    {
        var parameter = new DialogParameters { { "CurrentEvent", selectEvent } };

        var result = await _dialogService.Show<SelectBetModal>("Выбор ставки", parameter).Result;

        if (!result.Cancelled) await RefreshUser.InvokeAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        displayEvents = step >= Events.Count ? Events.GetRange(0, Events.Count).ToList() : Events.GetRange(0, step).ToList();
        return base.OnParametersSetAsync();
    }

    private void LeafDisplayEvents(List<Event> newDisplayEvents)
    {
        displayEvents = newDisplayEvents;
    }
}


