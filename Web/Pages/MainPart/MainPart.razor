
<div class="main-part">
    <table>
        <tr>
            <td>
                <div class="bet" style="margin: 0px;">
                    <Test.Pages.MainPart.Matches.ActiveMatches Events="@allEvents.SelectEvents(_current).ToList()" RefreshUser ="RefreshUser"></Test.Pages.MainPart.Matches.ActiveMatches>
                </div>
            </td>
            <td class="side">
                <div class="user">
                    <Test.Pages.MainPart.UserSide.UserSide></Test.Pages.MainPart.UserSide.UserSide>
                </div>
            </td>
        </tr>
    </table>

    <div class="bet" style="margin: 0px; margin-top: 40px">
        <Test.Pages.MainPart.Matches.FutureMatches Events="@allEvents.SelectEvents(_future).ToList()" RefreshUser ="RefreshUser"></Test.Pages.MainPart.Matches.FutureMatches>
    </div>

    <div class="bet" style="margin: 0px; margin-top: 40px; margin-bottom: 60px">
        <Test.Pages.MainPart.Matches.PastMatches Events="@allEvents.SelectEvents(_past).ToList()"></Test.Pages.MainPart.Matches.PastMatches>
    </div>
</div>


@code
{
    [CascadingParameter]
    public MainLayout MainLayout { get; set; }

    [CascadingParameter]
    public Sport SelectSport { get; set; }

    HashSet<Event> allEvents { get; set; }

    Func<Event, bool> _current = temp => temp.StartDate <= DateTime.Now && temp.IsPast != true;
    Func<Event, bool> _future = temp => temp.StartDate > DateTime.Now;
    Func<Event, bool> _past = temp => temp.IsPast == true;


    protected override Task OnParametersSetAsync()
    {
        allEvents = EventService.GetEvents(SelectSport);
        StateHasChanged();
        return base.OnParametersSetAsync();
    }

    private void RefreshUser()
    {
        MainLayout.AddLoginUser(UserService.GetUser(MainLayout.loginUser.Id));
        
    }



}

