@page "/header"

@using Pages.PopUpWindows

@inherits LayoutComponentBase
@inject IDialogService _dialogService
@inject SignInManager<User> _signInManager
@inject NavigationManager _manager
@inject UserManager<User> _userManager
@inject ILocalStorageService _localStorage
@inject ISessionStorageService _sessionStorage
@inject ISnackbar _snackBar


<div class="menu1" style="margin: 0 0 0 0">
    <div class="line">
        <div class="grid" style="margin: 0 0 0 0">
            <div>
                <NavLink style="text-decoration: none; color: white;" href="">
                    <div style="justify-content: center; display:inline-flex">
                        <image src="https://i.imgur.com/5l3htpj.png?2" style="height: 80px; width: 80px;"></image>

                        <div>
                            Лого
                        </div>
                    </div>
                </NavLink>
            </div>
        </div>

        <div>
            <div class="grid">
                <div style="height: 80px;">
                   
                        <select value="@selectSport.Id" @onchange="Callback" aria-label="Default select example" style="height: 80px; font-size: 20px; background-color:#3b4451; border-width: 0; border:0px; outline:0px; margin:0 10px; color: white; justify-content: center;">
                            @foreach (var temp in _sports)
                            {
                                <option value="@temp.Id">@temp.Title</option>
                            }
                        </select>
                </div>
                <div>
                    <NavLink style="text-decoration:none; color: white; justify-content: center; height: 80px;" href="">
                        Топ команд
                    </NavLink>
                </div>
                <div>
                    <NavLink style="text-decoration:none; color: white; justify-content: center; height: 80px;" href="">
                        Тех. поддержка
                    </NavLink>
                </div>
            </div>



            <div class="custom-features" style="color: white; justify-content: center; height: 80px;">
                @if (_loginUser is not null)
                {
                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Logout">
                            Выйти
                        </MudButton>
                    </div>
                }
                else
                {
                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Login">
                            Войти
                        </MudButton>
                        <br />
                        <MudButton Variant="Variant.Filled" Color="Color.Success">
                            <NavLink style="text-decoration:none; color: white;" href="registation">
                                Регистрация
                            </NavLink>
                        </MudButton>
                    </div>
                }
            </div>

            <div class="custom-features" style="justify-content: center; height: 80px; margin:0 50px 0 0">
                <div>
                    <NavLink style="text-decoration:none; color: white;" href="">
                        FAQ
                    </NavLink>
                    @if (selectSport is not null)
                    {
                        @selectSport.Id
                    }
                </div>
            </div>
        </div>
    </div>
</div>




@code {
    Sport selectSport = new Sport();
    User _loginUser;
    List<Sport> _sports = new List<Sport>();

    [Parameter]
    public EventCallback<User> OnClickCallback { get; set; }

    [Parameter]
    public EventCallback<Sport> SportCallBack { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (await _localStorage.ContainKeyAsync(StorageKeys.LocalKey))
        {
            _loginUser = await _localStorage.GetItemAsync<User>(StorageKeys.LocalKey);
            await _sessionStorage.SetItemAsync(StorageKeys.SessionKey, _loginUser);
            await OnClickCallback.InvokeAsync(_loginUser);
            _sports.Add(new Sport() { Id = 1, Title = "CS:GO" });
            _sports.Add(new Sport() { Id = 2, Title = "LOL" });
        }
    }

    private async void Login()
    {
        var dialog = _dialogService.Show<LoginUser>("Вход");
        var result = await dialog.Result;
        if (result.Cancelled)
        {

        }
        else
        {
            _loginUser = (User)result.Data;
            //_loginUser = await _sessionStorage.GetItemAsync<User>(StorageKeys.SessionKey);
            await OnClickCallback.InvokeAsync(_loginUser);
            StateHasChanged();
        }
    }


    private async Task Logout()
    {
        var dialog = _dialogService.Show<LogOut>("Подтверждение");

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            _loginUser = null;
            await OnClickCallback.InvokeAsync(_loginUser);
        }
    }



    private async void Callback(ChangeEventArgs obj)
    {
        selectSport = _sports.FirstOrDefault(e => e.Id== Convert.ToInt32(obj.Value));
        await SportCallBack.InvokeAsync(selectSport);
    }

}
